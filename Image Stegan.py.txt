import cv2
import numpy as np
import types
from google.colab.patches import cv2_imshow


def encode_text():
  img_name = input("Enter image name :")
  image = cv2.imread(img_name)
  print("The shape of the image :",image.shape)
  print("The original image :")
  resized_image = cv2.resize(image,(200,200))
  cv2_imshow(resized_image)
  data = input("Enter data to be encoded:")
  if (len(data) == 0):
    raise ValueError('Data is empty')
  filename = input("enter the filename of new encoded image")
  encoded_image = embedData(image,data)
  cv2.imwrite(filename,encoded_image)

def embedData(image,secret_message):
    n_bytes = image.shape[0] * image.shape[1] * 3 // 8
    print("Maximum bytes to encode:",n_bytes)
    if len(secret_message) > n_bytes:
      raise ValueError("Error encontered insufficient bytes")
    secret_message += "#####"
    data_index = 0
    binary_secret_msg =ToBinary(secret_message)
    data_len = len(binary_secret_msg)
    for values in image:
     for pixel in values:
      r,g,b = ToBinary(pixel)
      if data_index < data_len:
        pixel[0] = int(r[:-1] + binary_secret_msg[data_index],2)
        data_index +=1
      if data_index < data_len:
        pixel[1] = int(g[:-1] + binary_secret_msg[data_index],2)
        data_index +=1
      if data_index < data_len:
        pixel[2] = int(b[:-1] + binary_secret_msg[data_index],2)
        data_index +=1
      if data_index >= data_len:
        break
    return image

def ToBinary(message):
  if type(message) == str:
    return ''.join([format(ord(i),"08b") for i in message])
  elif type(message) == bytes or type(message) == np.ndarray:
     return [format(i,"08b") for i in message]
  elif type(message) == int or type(message) == np.uint8:
    return format(message,"08b") 
  else:
    raise TypeError("Input type not supported")

def decode_text():
  img_name = input("Enter the filename of the steganographed image to be decoded")
  image = cv2.imread(img_name)
  print("Stegano image :")
  resized_image = cv2.resize(image, (200,200))
  cv2_imshow(resized_image)
  text= display(image)
  return text

def display(image):
  bin_data = ""
  for values in image:
     for pixel in values:
       r, g, b = ToBinary(pixel)
       bin_data += r[-1]
       bin_data += g[-1]
       bin_data += b[-1]
  bytes = [bin_data[i:i+8] for i in range(0,len(bin_data),8)]
  decoded_data = ""
  for byte in bytes:         
      decoded_data += chr(int(byte, 2))
      if decoded_data[-5:] == "#####":
          break             
  return decoded_data[:-5]

def Steganography():
  a=input("Image Steganography \n 1. Encode the data\n 2.Decode the data\n 3. Enter the choice:")
  userinput= int (a)
  if(userinput == 1):
    print("\n Encoding")
    encode_text()
  elif(userinput == 2):
    print("\n Decoding")
    print("Decoded message" +decode_text())
  else:
      raise Exception("Enter correct input")

Steganography()